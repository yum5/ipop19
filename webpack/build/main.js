!function(e){function n(e){var n=require("path").join(__dirname,e+"."+o+".hot-update.js");require("fs").readFile(n,"utf-8",function(e,r){if(e){if(I.onError)return I.oe(e);throw e}var t={};require("vm").runInThisContext("(function(exports) {"+r+"\n})",{filename:n})(t),function(e,n){if(!_[e]||!w[e])return;for(var r in w[e]=!1,n)Object.prototype.hasOwnProperty.call(n,r)&&(f[r]=n[r]);0==--v&&0===m&&g()}(t.id,t.modules)})}var r,t=!0,o="005cdc7817b64193eed0",i={},c=[],d=[];function s(e){var n=D[e];if(!n)return I;var t=function(t){return n.hot.active?(D[t]?-1===D[t].parents.indexOf(e)&&D[t].parents.push(e):(c=[e],r=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),c=[]),I(t)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(n){I[e]=n}}};for(var i in I)Object.prototype.hasOwnProperty.call(I,i)&&"e"!==i&&Object.defineProperty(t,i,o(i));return t.e=function(e){return"ready"===l&&p("prepare"),m++,I.e(e).then(n,function(e){throw n(),e});function n(){m--,"prepare"===l&&(y[e]||O(e),0===m&&0===v&&g())}},t}var a=[],l="idle";function p(e){l=e;for(var n=0;n<a.length;n++)a[n].call(null,e)}var u,f,h,v=0,m=0,y={},w={},_={};function x(e){return+e+""===e?+e:e}function b(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return t=e,p("check"),(n=require("path").join(__dirname,o+".hot-update.json"),new Promise(function(e,r){require("fs").readFile(n,"utf-8",function(n,t){if(n)return e();try{var o=JSON.parse(t)}catch(e){return r(e)}e(o)})})).then(function(e){if(!e)return p("idle"),null;w={},y={},_=e.c,h=e.h,p("prepare");var n=new Promise(function(e,n){u={resolve:e,reject:n}});f={};return O(0),"prepare"===l&&0===m&&0===v&&g(),n});var n}function O(e){_[e]?(w[e]=!0,v++,n(e)):y[e]=!0}function g(){p("ready");var e=u;if(u=null,e)if(t)Promise.resolve().then(function(){return j(t)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var r in f)Object.prototype.hasOwnProperty.call(f,r)&&n.push(x(r));e.resolve(n)}}function j(n){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var r,t,d,s,a;function u(e){for(var n=[e],r={},t=n.slice().map(function(e){return{chain:[e],id:e}});t.length>0;){var o=t.pop(),i=o.id,c=o.chain;if((s=D[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var d=0;d<s.parents.length;d++){var a=s.parents[d],l=D[a];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([a]),moduleId:i,parentId:a};-1===n.indexOf(a)&&(l.hot._acceptedDependencies[i]?(r[a]||(r[a]=[]),v(r[a],[i])):(delete r[a],n.push(a),t.push({chain:c.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function v(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}n=n||{};var m={},y=[],w={},b=function(){console.warn("[HMR] unexpected require("+g.moduleId+") to disposed module")};for(var O in f)if(Object.prototype.hasOwnProperty.call(f,O)){var g;a=x(O);var j=!1,P=!1,E=!1,H="";switch((g=f[O]?u(a):{type:"disposed",moduleId:O}).chain&&(H="\nUpdate propagation: "+g.chain.join(" -> ")),g.type){case"self-declined":n.onDeclined&&n.onDeclined(g),n.ignoreDeclined||(j=new Error("Aborted because of self decline: "+g.moduleId+H));break;case"declined":n.onDeclined&&n.onDeclined(g),n.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+g.moduleId+" in "+g.parentId+H));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(g),n.ignoreUnaccepted||(j=new Error("Aborted because "+a+" is not accepted"+H));break;case"accepted":n.onAccepted&&n.onAccepted(g),P=!0;break;case"disposed":n.onDisposed&&n.onDisposed(g),E=!0;break;default:throw new Error("Unexception type "+g.type)}if(j)return p("abort"),Promise.reject(j);if(P)for(a in w[a]=f[a],v(y,g.outdatedModules),g.outdatedDependencies)Object.prototype.hasOwnProperty.call(g.outdatedDependencies,a)&&(m[a]||(m[a]=[]),v(m[a],g.outdatedDependencies[a]));E&&(v(y,[g.moduleId]),w[a]=b)}var k,q=[];for(t=0;t<y.length;t++)a=y[t],D[a]&&D[a].hot._selfAccepted&&q.push({module:a,errorHandler:D[a].hot._selfAccepted});p("dispose"),Object.keys(_).forEach(function(e){!1===_[e]&&function(e){delete installedChunks[e]}(e)});for(var A,U,M=y.slice();M.length>0;)if(a=M.pop(),s=D[a]){var C={},R=s.hot._disposeHandlers;for(d=0;d<R.length;d++)(r=R[d])(C);for(i[a]=C,s.hot.active=!1,delete D[a],delete m[a],d=0;d<s.children.length;d++){var S=D[s.children[d]];S&&((k=S.parents.indexOf(a))>=0&&S.parents.splice(k,1))}}for(a in m)if(Object.prototype.hasOwnProperty.call(m,a)&&(s=D[a]))for(U=m[a],d=0;d<U.length;d++)A=U[d],(k=s.children.indexOf(A))>=0&&s.children.splice(k,1);for(a in p("apply"),o=h,w)Object.prototype.hasOwnProperty.call(w,a)&&(e[a]=w[a]);var T=null;for(a in m)if(Object.prototype.hasOwnProperty.call(m,a)&&(s=D[a])){U=m[a];var $=[];for(t=0;t<U.length;t++)if(A=U[t],r=s.hot._acceptedDependencies[A]){if(-1!==$.indexOf(r))continue;$.push(r)}for(t=0;t<$.length;t++){r=$[t];try{r(U)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:a,dependencyId:U[t],error:e}),n.ignoreErrored||T||(T=e)}}}for(t=0;t<q.length;t++){var F=q[t];a=F.module,c=[a];try{I(a)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(r){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:r,originalError:e}),n.ignoreErrored||T||(T=r),T||(T=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:a,error:e}),n.ignoreErrored||T||(T=e)}}return T?(p("fail"),Promise.reject(T)):(p("idle"),new Promise(function(e){e(y)}))}var D={};function I(n){if(D[n])return D[n].exports;var t=D[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._acceptedDependencies[e[t]]=r||function(){};else n._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._declinedDependencies[e[r]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=n._disposeHandlers.indexOf(e);r>=0&&n._disposeHandlers.splice(r,1)},check:b,apply:j,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var n=a.indexOf(e);n>=0&&a.splice(n,1)},data:i[e]};return r=void 0,n}(n),parents:(d=c,c=[],d),children:[]};return e[n].call(t.exports,t,t.exports,s(n)),t.l=!0,t.exports}I.m=e,I.c=D,I.d=function(e,n,r){I.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},I.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},I.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(n,"a",n),n},I.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},I.p="",I.h=function(){return o},s(0)(I.s=0)}({"./node_modules/node-cmd/cmd.js":function(e,n,r){var t=r("child_process").exec,o={get:function(e,n){return t(e,function(e,r,t){n&&n(e,r,t)})},run:function(e){return t(e)}};e.exports=o},"./src/main/index.js":function(e,n,r){"use strict";const t=r("electron"),o=r("./node_modules/node-cmd/cmd.js"),i=r("os"),{app:c,BrowserWindow:d,ipcMain:s}=t,a="centos6",l="centos7",p="darwin",u=!1;let f;function h(){(f=new d({width:1e3,height:800})).loadURL("file://"+__dirname+"/index.html"),u&&f.webContents.openDevTools(),f.on("closed",function(){f=null})}c.on("ready",h),c.on("window-all-closed",()=>{"darwin"!==process.platform&&c.quit()}),c.on("activate",()=>{null===f&&h()});const v=()=>{if("linux"===process.platform){if(i.release().includes("el6"))return a;if(i.release().includes("el7"))return l;throw"Unsupported Platform"}if("darwin"===process.platform)return p;throw"Unsupported Platform"},m={interval:1e3,nic:"en0"};s.on("settings_changed",function(e,n){m.interval=n.interval,m.nic=n.nic});const y=()=>{o.get((e=>{switch(v()){case a:return`netstat -I${e}`;case l:return`ip -s link show dev ${e}`;case p:return`netstat -I ${e}`}})(m.nic),function(e,n,r){const t=(e=>{switch(v()){case a:{const n=e.split("\n")[2].split(/\s+/);return{rx:parseInt(n[3]),tx:parseInt(n[7])}}case l:{const n=e.split("\n"),r=n[3].split(/\s+/),t=n[5].split(/\s+/);return{rx:parseInt(r[2]),tx:parseInt(t[2])}}case p:{const n=e.split("\n")[1].split(/\s+/);return{rx:parseInt(n[4]),tx:parseInt(n[6])}}}})(n);f&&f.webContents.send("packet_received",{timestamp:new Date,rx:t.rx,tx:t.tx})}),setTimeout(y,m.interval)};y()},0:function(e,n,r){e.exports=r("./src/main/index.js")},child_process:function(e,n){e.exports=require("child_process")},electron:function(e,n){e.exports=require("electron")},os:function(e,n){e.exports=require("os")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,